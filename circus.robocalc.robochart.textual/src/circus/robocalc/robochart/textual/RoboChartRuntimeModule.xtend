/********************************************************************************
 * Copyright (c) 2019 University of York and others
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   Alvaro Miyazawa - initial definition
 ********************************************************************************/

/*
 * generated by Xtext 2.17.1
 */
package circus.robocalc.robochart.textual

import circus.robocalc.robochart.textual.scoping.RoboChartImportURIGlobalScopeProvider
import circus.robocalc.robochart.textual.scoping.RoboChartScopeProvider
import com.google.inject.Binder
import org.eclipse.xtext.generator.IOutputConfigurationProvider
import org.eclipse.xtext.naming.IQualifiedNameConverter
import org.eclipse.xtext.scoping.IGlobalScopeProvider
import org.eclipse.xtext.scoping.IScopeProvider
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import circus.robocalc.robochart.textual.scoping.RoboChartImportedNamespaceAwareLocalScopeProvider
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy
import org.eclipse.xtext.naming.IQualifiedNameProvider
import circus.robocalc.robochart.textual.index.RoboChartResourceDescriptionsStrategy

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class RoboChartRuntimeModule extends AbstractRoboChartRuntimeModule {
	override Class<? extends IScopeProvider> bindIScopeProvider() {
		return RoboChartScopeProvider
	}
	
	def Class<? extends IOutputConfigurationProvider> bindIOutputConfigurationProvider() {
		return RoboChartOutputConfigurationProvider
	}
	
	def Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
		return RoboChartQualifiedNameConverter
	}
	
	override Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
    	return RoboChartImportURIGlobalScopeProvider
	}
	
	override void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(org.eclipse.xtext.scoping.IScopeProvider)
		.annotatedWith(com.google.inject.name.Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
		.to(RoboChartImportedNamespaceAwareLocalScopeProvider)
	}
	
	def Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
 		return RoboChartResourceDescriptionsStrategy
 	}
 	
 	// contributed by org.eclipse.xtext.xtext.generator.exporting.QualifiedNamesFragment2
	/* override Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return RoboChartQualifiedNameProvider
	}*/
}
