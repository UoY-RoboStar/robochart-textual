/********************************************************************************
 * Copyright (c) 2019 University of York and others
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   Alvaro Miyazawa - initial definition
 ********************************************************************************/

/*
 * generated by Xtext 2.17.1
 */
package circus.robocalc.robochart.textual.generator

import org.eclipse.core.runtime.CoreException
import org.eclipse.core.runtime.ISafeRunnable
import org.eclipse.core.runtime.SafeRunner
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.core.runtime.Platform
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.core.resources.IFile
import org.eclipse.core.resources.IContainer
import java.util.List
import java.util.ArrayList
import org.eclipse.emf.common.util.URI

/**
 * This class searches for all robochart generators provided by plugins,
 * and executes them on each resource. It generates code from your
 * model files on save.
 * 
 * New generators can be implemented by contributing a subclass of
 * {@link AbstractRoboChartGenerator} to the extension point
 * {@code robochart.generator}.
 * 
 * @author Alvaro Miyazawa 
 * @version 2.0
 * @since 11.0
 * @see AbstractRoboChartGenerator
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RoboChartGenerator extends AbstractGenerator {

	static val GEN_ID = "robochart.generator"
	
	def protected List<IFile> getAllRoboChartFiles(IContainer project) {
		var members = project.members();
		var list = new ArrayList<IFile>();
		for (member : members) {
			if (member instanceof IContainer) {
				list.addAll(getAllRoboChartFiles(member));
			} else if (member instanceof IFile && "rct".equals(member.getFileExtension())) {
				list.add(member as IFile);
			} else if (member instanceof IFile && "assertions".equals(member.getFileExtension())) {
				list.add(member as IFile);
			}
		}
		return list;
	}

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val config = Platform.extensionRegistry.getConfigurationElementsFor(GEN_ID);
		try {
			
			// When called in response to a build from Eclipse, instead of via a Clean>Build,
			// or via the CompileHandler class, not all resources, particularly those referenced
			// anonymously, will be the context of the ResourceSet. Thus, we call a method that
			// figures this out in a safe manner, when run from Eclipse.
			
			ProjectUtilities.resolveDependencies(resource);
			
			for (e : config) {
				val o = e.createExecutableExtension("class")
				if (o instanceof AbstractGenerator) {
					// executing generator
					val runnable = new ISafeRunnable() {
						override void handleException(Throwable e) {
							System.err.println(e.message)
						}

						override void run() throws Exception {
							(o as AbstractGenerator).doGenerate(resource, fsa, context)
						}
					}
					SafeRunner.run(runnable)
				}
			}
		} catch (CoreException ex) {
			System.err.println(ex.message)
		}
	}
}
